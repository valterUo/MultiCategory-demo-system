{"schemaVersion":"1.0"}
{"id":"5f1993d0-5b56-4353-a035-01e88bbb97e7","originalQuery":"QUERY (\\x xs -> x:xs)\n FROM locations\n TO relational","parsedQuery":"foldr (\\x xs -> x:xs ) [] locations","model":"relational"}
{"id":"7f0d2bd7-a3c6-4de1-b46e-99bdc1773ca3","originalQuery":"QUERY (\\x xs -> x:xs)\n FROM locations\n TO relational","parsedQuery":"foldr (\\x xs -> x:xs ) [] locations","model":"relational"}
{"id":"03f9cf1d-def3-4883-b811-32811014789d","originalQuery":"QUERY (\\x xs -> x:xs)\n FROM locations\n TO relational","parsedQuery":"foldr (\\x xs -> x:xs ) [] locations","model":"relational"}
{"id":"095e2000-30ce-4f91-8faf-cdde553300a7","originalQuery":"QUERY (\\x xs -> x:xs)\n FROM locations\n TO relational","parsedQuery":"foldr (\\x xs -> x:xs ) [] locations","model":"relational"}
{"id":"62c9fe43-2466-403c-bf46-90b627738eb9","originalQuery":"QUERY (\\x xs -> x:xs)\n FROM locations\n TO relational","parsedQuery":"foldr (\\x xs -> x:xs ) [] locations","model":"relational"}
{"id":"dddf6b2a-0d3e-447b-b63d-5030b2a9aecf","originalQuery":"QUERY (\\x xs -> x:xs)\n FROM locations\n TO relational","parsedQuery":"foldr (\\x xs -> x:xs ) [] locations","model":"relational"}
{"id":"f2715176-a48e-475d-bbdf-e5a91291df59","originalQuery":"QUERY (\\x xs -> x:xs)\n FROM locations\n TO relational","parsedQuery":"foldr (\\x xs -> x:xs ) [] locations","model":"relational"}
{"id":"82c77258-ce53-4be6-a8c0-48017e9d89f9","originalQuery":"QUERY (\\x xs -> x:xs)\n FROM locations\n TO relational","parsedQuery":"foldr (\\x xs -> x:xs ) [] locations","model":"relational"}
{"id":"c1094c8f-2a2f-44e3-8769-2b017cb98e7c","originalQuery":"QUERY (\\x -> Vertex x)\n FROM customers\n TO algebraic graph","parsedQuery":"foldg Algebra.Graph.empty (\\x -> Vertex x ) (\\x y -> overlay x y ) (\\x y -> connect x y ) customers","model":"algebraic graph"}
{"id":"5484afb2-72d1-4d1a-8fba-a469db24971e","originalQuery":"QUERY (\\vertex newGraph -> let person = vertexValue vertex in if firstName person == \"Li\" && lastName person == \"Li\" then addVertex vertex newGraph else newGraph)\nFROM personKnowsPersonGraph\nTO nimblegraph","parsedQuery":"foldNimble (\\vertex newGraph -> let person = vertexValue vertex in if firstName person == \"Li\" && lastName person == \"Li\" then addVertex vertex newGraph else newGraph ) (\\edge newGraph -> case ( Map.lookup ( vertexId $ NimbleGraph.NimbleGraph.source edge ) ( NimbleGraph.NimbleGraph.vertices newGraph ) ) of Nothing -> newGraph; Just ( sourceVertex ) -> case Map.lookup ( vertexId $ NimbleGraph.NimbleGraph.target edge ) ( NimbleGraph.NimbleGraph.vertices newGraph ) of Nothing -> newGraph; Just ( targetVertex ) -> addEdge edge newGraph ) emptyNimbleGraph personKnowsPersonGraph","model":"nimblegraph"}
{"id":"6aff4132-95c8-4e4a-b3de-a96888e9afad","originalQuery":"QUERY (\\x xs -> x:xs)\n FROM locations\n TO relational","parsedQuery":"foldr (\\x xs -> x:xs ) [] locations","model":"relational"}
{"id":"49ed1196-b90e-4b15-8654-0979d603dce3","originalQuery":"QUERY (\\x xs -> x:xs)\n FROM locations\n TO relational","parsedQuery":"foldr (\\x xs -> x:xs ) [] locations","model":"relational"}
{"id":"b0265bfe-e8f5-404e-a1bd-a43c145372e1","originalQuery":"QUERY (\\x xs -> x:xs)\n FROM locations\n TO relational","parsedQuery":"foldr (\\x xs -> x:xs ) [] locations","model":"relational"}
{"id":"dd8b9b62-6c8b-47e4-8330-b05f391d09d9","originalQuery":"QUERY (\\x xs -> cons x xs) FROM orders TO relational","parsedQuery":"foldr (\\x xs -> x : xs ) [] orders","model":"relational"}
