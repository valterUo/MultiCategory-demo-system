{"schemaVersion":"1.0"}
{"id":"ced9e605-56f8-416c-8430-57e7d25fe3ee","originalQuery":"LET t BE QUERY (\\x -> if (customerId x ==  3 || customerId x == 4) then cons x else nil) FROM customers TO algebraic graph IN QUERY (\\x -> findTargetNeighbors x customers) FROM t AS algebraic graph TO algebraic graph","parsedQuery":"let t = foldg  Algebra.Graph.empty (\\x -> if ( customerId x == 3 || customerId x == 4 ) then Vertex x else Algebra.Graph.empty ) (\\x y -> overlay x y ) (\\x y -> connect x y )  customers in foldg  Algebra.Graph.empty (\\x -> findTargetNeighbors x customers ) (\\x y -> overlay x y ) (\\x y -> connect x y )  t"}
{"id":"75ce9bc1-1d8c-446d-89e3-0f285a0cb785","originalQuery":"LET t BE QUERY (\\x -> if (customerId x ==  3 || customerId x == 4) then cons x else nil) FROM customers TO algebraic graph IN QUERY (\\x -> findTargetNeighbors x customers) FROM t AS algebraic graph TO algebraic graph","parsedQuery":"let t = foldg  Algebra.Graph.empty (\\x -> if ( customerId x == 3 || customerId x == 4 ) then Vertex x else Algebra.Graph.empty ) (\\x y -> overlay x y ) (\\x y -> connect x y )  customers in foldg  Algebra.Graph.empty (\\x -> findTargetNeighbors x customers ) (\\x y -> overlay x y ) (\\x y -> connect x y )  t"}
