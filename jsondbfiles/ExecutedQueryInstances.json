{"schemaVersion":"1.0"}
{"id":"7583814f-98c1-4f66-8b50-ebe45aed5f6e","originalQuery":"QUERY (\\x xs -> cons x xs)\n FROM locations\n TO relational","parsedQuery":"foldr (\\x xs -> x : xs ) [] locations","model":"relational"}
{"id":"732bb7bf-e1ad-49ec-bdd2-950a603ae167","originalQuery":"QUERY (\\x xs -> cons x xs)\n FROM orders\n TO xml","parsedQuery":"foldr (\\x xs -> x : xs ) [] orders","model":"xml"}
{"id":"70e00251-e25b-43d0-95eb-99151cb77774","originalQuery":"QUERY (\\x -> if creditLimit x > 500 then cons (customerName x, cityName (located x locations)) else nil)\nFROM customers\nTO algebraic graph","parsedQuery":"foldg Algebra.Graph.empty (\\x -> if creditLimit x > 500 then Vertex ( customerName x, cityName ( located x locations ) ) else Algebra.Graph.empty ) (\\x y -> overlay x y ) (\\x y -> connect x y ) customers","model":"algebraic graph"}
{"id":"6a3d391b-ddfe-41b0-8017-f1b58c114aaa","originalQuery":"QUERY (\\x xs -> cons (orderNumber x, customerName(ordered x customers), countryName(located(ordered x customers) locations)) xs)\nFROM orders\nTO relational","parsedQuery":"foldr (\\x xs -> (orderNumber x, customerName ( ordered x customers ) , countryName ( located ( ordered x customers ) locations ) ) : xs ) [] orders","model":"relational"}
{"id":"33593ef1-d282-486b-927e-4b1c5df9e501","originalQuery":"QUERY (\\current total -> if length (triplesOf total) < 20 then cons total current else total)\nFROM famousLocations\nTO rdf","parsedQuery":"(foldrdf (\\current total -> if length ( triplesOf total ) < 20 then addTriple total current else total ) RDF.empty famousLocations :: RDF TList)","model":"rdf"}
